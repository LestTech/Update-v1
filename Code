from github import Github
import json



version = 0

# Function to display the Tic-Tac-Toe board
def display_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Function to check for a win
def check_win(board, player):
    for row in board:
        if all([cell == player for cell in row]):
            return True

    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

# Function to check for a tie
def check_tie(board):
    return all([cell != ' ' for row in board for cell in row])

# Main game loop
def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)
    ]
    player = 'X'
    moves = 0

    while True:
        display_board(board)

        row, col = map(int, input(f"Player {player}, enter row (0-2) and column (0-2): ").split())

        if board[row][col] == ' ':
            board[row][col] = player
            moves += 1

            if check_win(board, player):
                display_board(board)
                print(f"Player {player} wins!")
                break

            if check_tie(board):
                display_board(board)
                print("It's a tie!")
                break

            player = 'O' if player == 'X' else 'X'
        else:
            print("Invalid move. Try again.")






def update():

    # Replace these variables with your GitHub username, repository, and access token.
    github_username = 'LestTech'
    repository_name = 'Update-v1'
    file = open("config.json", "r")
    data = file.read()
    file.close()
    
    data = json.loads(data)
    access_token = data["key"]
    

    # Create a GitHub instance with your access token.
    g = Github(access_token)

    # Get the repository object.
    repo = g.get_user(github_username).get_repo(repository_name)

    # Define the path to the file you want to access.
    file_path = 'Code'

    try:
        # Get the file contents.
        file_content = repo.get_contents(file_path)

        # Decode the content from base64 to get the actual file content.
        decoded_content = file_content.decoded_content.decode('utf-8')

        # Print the file content.
        newCode = decoded_content
    except Exception as e:
        print(f"An error occurred: {e}")

    file = open(f"Calculator v{version+1}.py", "a")
    for line in newCode.splitlines():
        file.write(f"{line}\n")
    file.close()
    


def decision():
    print("""
    1 - calculator
    2 - update
    """)

    choice = input(":")

    if choice == "1":
        calculator()
    else:
        update()




update()
